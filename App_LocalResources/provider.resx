<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="debugmode.Text" xml:space="preserve">
    <value>Debug Mode</value>
  </data>
  <data name="settings.Text" xml:space="preserve">
    <value>MaualPay Settings</value>
  </data>
  <data name="returnurl.Help" xml:space="preserve">
    <value>This is the URL that the client will be returned to after payment.  Use the protocol.</value>
  </data>
  <data name="returnurl.Text" xml:space="preserve">
    <value>Return URL</value>
  </data>
  <data name="manualpay.Text" xml:space="preserve">
    <value>Manual Pay</value>
  </data>
  <data name="active.Text" xml:space="preserve">
    <value>Active</value>
  </data>
  <data name="manualpay.Help" xml:space="preserve">
    <value>The Manual Pay provider deals with internal payment methods, which are not linked to the e-commerce system.  Like money and cheques.  The payments made with this provider are automatically accepted without any validation, it is the shop owner that needs to process the payment.</value>
  </data>
  <data name="returncommand.Help" xml:space="preserve">
    <value>This is the server command that will be ran when the client returns to the website.  It wil be placed in the return URL as a parameter of "cmd".</value>
  </data>
  <data name="returncommand.Text" xml:space="preserve">
    <value>Return Command</value>
  </data>
  <data name="validpayment.Help" xml:space="preserve">
    <value>If checked the payment status will go to "Payment Accepted", if not checked the payment status will be "Waiting for Payment"</value>
  </data>
  <data name="validpayment.Text" xml:space="preserve">
    <value>Valid Payment</value>
  </data>
  <data name="paybuttontext.Text" xml:space="preserve">
    <value>Button Text (html)</value>
  </data>
  <data name="paymsg.Text" xml:space="preserve">
    <value>Pay Message (html)</value>
  </data>
  <data name="paybutton.Text" xml:space="preserve">
    <value>&lt;svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 20 20" height="48px" viewBox="0 0 20 20" width="48px" fill="#000000"&gt;&lt;g&gt;&lt;rect fill="none" height="20" width="20"/&gt;&lt;path d="M14,3H6C5.45,3,5,3.45,5,4v1c0,0.55,0.45,1,1,1h8c0.55,0,1-0.45,1-1V4C15,3.45,14.55,3,14,3z M14,5H6V4h8V5z M16,17H4 c-0.55,0-1-0.45-1-1l0,0l0-1h14v1l0,0C17,16.55,16.55,17,16,17z M14.26,7.61C14.1,7.24,13.74,7,13.34,7H6.66 C6.26,7,5.9,7.24,5.74,7.61L3,14h14L14.26,7.61z M7.75,13h-0.5c-0.28,0-0.5-0.22-0.5-0.5c0-0.28,0.22-0.5,0.5-0.5h0.5 c0.28,0,0.5,0.22,0.5,0.5C8.25,12.78,8.03,13,7.75,13z M7.75,11h-0.5c-0.28,0-0.5-0.22-0.5-0.5S6.97,10,7.25,10h0.5 c0.28,0,0.5,0.22,0.5,0.5S8.03,11,7.75,11z M7.75,9h-0.5c-0.28,0-0.5-0.22-0.5-0.5c0-0.28,0.22-0.5,0.5-0.5h0.5 c0.28,0,0.5,0.22,0.5,0.5C8.25,8.78,8.03,9,7.75,9z M10.25,13h-0.5c-0.28,0-0.5-0.22-0.5-0.5S9.47,12,9.75,12h0.5 c0.28,0,0.5,0.22,0.5,0.5S10.53,13,10.25,13z M10.25,11h-0.5c-0.28,0-0.5-0.22-0.5-0.5c0-0.28,0.22-0.5,0.5-0.5h0.5 c0.28,0,0.5,0.22,0.5,0.5C10.75,10.78,10.53,11,10.25,11z M10.25,9h-0.5c-0.28,0-0.5-0.22-0.5-0.5S9.47,8,9.75,8h0.5 c0.28,0,0.5,0.22,0.5,0.5S10.53,9,10.25,9z M12.75,13h-0.5c-0.28,0-0.5-0.22-0.5-0.5s0.22-0.5,0.5-0.5h0.5c0.28,0,0.5,0.22,0.5,0.5 S13.03,13,12.75,13z M12.75,11h-0.5c-0.28,0-0.5-0.22-0.5-0.5c0-0.28,0.22-0.5,0.5-0.5h0.5c0.28,0,0.5,0.22,0.5,0.5 C13.25,10.78,13.03,11,12.75,11z M12.75,9h-0.5c-0.28,0-0.5-0.22-0.5-0.5S11.97,8,12.25,8h0.5c0.28,0,0.5,0.22,0.5,0.5 S13.03,9,12.75,9z"/&gt;&lt;/g&gt;&lt;/svg&gt;</value>
  </data>
  <data name="paybuttonmsg.Text" xml:space="preserve">
    <value>&lt;b&gt;Pay by Cheque or Bank Transfer&lt;/b&gt;&lt;br/&gt;
&lt;i&gt;Your order will be instantly accepted, it will be prepared and sent when your payment has been received.  Instructions on how to pay will be included in your order receipt email.&lt;/i&gt;</value>
  </data>
</root>